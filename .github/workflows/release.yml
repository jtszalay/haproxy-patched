name: Build and Release HAProxy Layer

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Enable flakes
        run: |
          echo "experimental-features = nix-command flakes" | sudo tee -a /etc/nix/nix.conf
          sudo systemctl restart nix-daemon

      - name: Build haproxy layer
        run: |
          nix build --print-build-logs
          ls -la result/

      - name: Get HAProxy version
        id: haproxy_version
        run: |
          VERSION=$(nix eval --raw --impure --expr "
            let
              flake = builtins.getFlake (toString ./.);
              pkgs = flake.inputs.nixpkgs.legacyPackages.x86_64-linux;
            in
              pkgs.haproxy.version
          ")
          echo "haproxy_version=$VERSION" >> $GITHUB_OUTPUT
          echo "HAProxy version: $VERSION"

      - name: Extract version
        id: version
        run: |
          if [[ $GITHUB_REF_TYPE == "tag" ]]; then
            echo "version=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "version=latest" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: result/haproxy-layer.tar.gz
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            HAProxy Patched Layer
            
            **HAProxy Version:** ${{ steps.haproxy_version.outputs.haproxy_version }}
            **Patches Applied:** Race condition fix
            
            Contains a patched HAProxy binary with all dependencies packaged as an OCI layer.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


